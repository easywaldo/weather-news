{"version":3,"sources":["service/weatherService.js","component/weatherInfo.js","component/weatherList.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["newsList","WeatherService","getNewsList","fetch","mode","method","headers","Headers","then","res","json","console","log","testSample","WeatherInfo","this","props","news","count","undefined","key","href","linkUrl","src","thumbnail","title","React","Component","WeatherList","weatherList","map","item","result","App","state","isLoaded","items","setState","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"2MAEIA,G,kBAAW,CACX,CACI,GAAM,EACN,MAAS,UAmCFC,EA9BX,aAAe,yBAIfC,YAAc,WAiBV,OAfAC,MAAM,8EAA+E,CAC7EC,KAAM,OACNC,OAAQ,MAERC,QAAS,IAAIC,QAAS,CAChB,eAAgB,uBAEvBC,MAAK,SAACC,GACL,OAAOA,EAAIC,UAEZF,MAAK,SAACE,GAGL,OAFAC,QAAQC,IAAIF,GACZV,EAAWU,KAGZV,GArBG,KAwBda,WAAa,WAET,MAAO,eCdAC,E,iLAnBD,IAAD,EACmBC,KAAKC,MAArBC,EADH,EACGA,KAAMC,EADT,EACSA,MACd,OAAmB,OAAfH,KAAKC,YAAiCG,IAAfJ,KAAKC,MAExB,yBAAKI,IAAKF,GACN,8BACI,uBAAGG,KAAMJ,EAAKK,SAAS,yBAAKC,IAAKN,EAAKO,aACtC,8BAAOP,EAAKQ,cAOxB,M,GAfcC,IAAMC,WCmBjBC,E,iLAhBP,QAAmBT,IAAfJ,KAAKC,OAAsC,OAAfD,KAAKC,MAArC,CAGA,IACMhB,EADce,KAAKC,MAAMa,YACFC,KACzB,SAACC,EAAMb,GAAP,OACI,kBAAC,EAAD,CAAaE,IAAKF,EAAOD,KAAMc,OAEvC,OACI,6BACK/B,Q,GAZS0B,IAAMC,WCI5B3B,EAAW,IAAIC,EACf+B,EAAShC,EAASE,cACtBS,QAAQC,IAAIoB,G,IAkEGC,E,YAhEb,WAAYjB,GAAQ,IAAD,8BACjB,4CAAMA,KACDkB,MAAQ,CACXC,UAAU,EACVC,MAAO,IAJQ,E,iFAQE,IAAD,OAClBjC,MAAM,8EAA+E,CACzEC,KAAM,OACNC,OAAQ,MAERC,QAAS,IAAIC,QAAS,CAChB,eAAgB,uBAEvBC,MAAK,SAACC,GACL,OAAOA,EAAIC,UAEZF,MAAK,SAACE,GAOL,OANAC,QAAQC,IAAIF,GACZV,EAAWU,EACX,EAAK2B,SAAS,CACZF,UAAU,EACVC,MAAOpC,IAEFA,O,+BAIX,IAAD,EACqBe,KAAKmB,MAAzBC,EADD,EACCA,SAAUC,EADX,EACWA,MAkBlB,OAAgB,GAAZD,EAEA,kBAAC,EAAD,CAAaN,YAAaO,IAK5B,yBAAKE,UAAU,OAAf,kB,GAzDYZ,IAAMC,WCEJY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,MAAK,SAAA2C,GACjCA,EAAaC,iB,6EErInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.87aefc90.chunk.js","sourcesContent":["import { wait } from \"@testing-library/dom\";\n\nlet newsList = [\n    {\n        \"id\": 1,\n        \"title\": \"test\"\n    }\n];\n\nclass WeatherService {\n    constructor() {\n\n    };\n\n    getNewsList = () => {\n\n        fetch('https://easywaldo-test-api.azurewebsites.net/weatherForecast/GetWeatherNews', {\n                mode: 'cors',\n                method: 'GET',\n                //credentials: 'include',\n                headers: new Headers ({\n                      'Content-Type': 'application/json'\n                })\n            }).then((res) => {\n                return res.json();\n                //resolve(res ? JSON.parse(res) : {})\n            }).then((json) => {\n                console.log(json);\n                newsList = json;\n                return newsList;\n            });\n        return newsList;\n    };\n\n    testSample = () => {\n        //await wait(1000);\n        return \"helloworld\";\n    };\n}\n\nexport default WeatherService;","import React, { Component } from 'react';\n\nclass WeatherInfo extends React.Component {\n    render() {\n        const { news, count } = this.props;\n        if (this.props !== null && this.props !== undefined) {\n            return(\n                <div key={count}>\n                    <span>\n                        <a href={news.linkUrl}><img src={news.thumbnail} /></a>\n                        <span>{news.title}</span>\n                    </span>\n                    \n                </div>\n            );\n        }\n        else {\n            return;\n        }\n    };\n}\n\nexport default WeatherInfo;","import React, { Component } from 'react';\nimport WeatherInfo from './weatherInfo';\n\nclass WeatherList extends React.Component {\n    render() {\n        if (this.props === undefined || this.props === null) {\n            return;\n        }\n        const weatherList = this.props.weatherList;\n        const newsList = weatherList.map(\n            (item, count) => (\n                <WeatherInfo key={count} news={item} />\n            ));\n        return(\n            <div>\n                {newsList}\n            </div>\n        );\n    }\n}\n\nexport default WeatherList;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport WeatherService from './service/weatherService';\nimport WeatherList from './component/weatherList';\n\n\nlet newsList = new WeatherService();\nlet result = newsList.getNewsList();\nconsole.log(result);\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      items: []\n    };\n  }\n  \n  componentDidMount() {\n    fetch('https://easywaldo-test-api.azurewebsites.net/weatherForecast/GetWeatherNews', {\n                mode: 'cors',\n                method: 'GET',\n                //credentials: 'include',\n                headers: new Headers ({\n                      'Content-Type': 'application/json'\n                })\n            }).then((res) => {\n                return res.json();\n                //resolve(res ? JSON.parse(res) : {})\n            }).then((json) => {\n                console.log(json);\n                newsList = json;\n                this.setState({\n                  isLoaded: true,\n                  items: newsList\n                });\n                return newsList;\n            });\n  }\n\n  render() {\n    const { isLoaded, items } = this.state;\n    //return (\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n    if (isLoaded == true) {\n      return (\n        <WeatherList weatherList={items}/>\n      );\n    }\n    else {\n      return (\n      <div className=\"App\">\n        loading...\n      </div>\n      );\n    }\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}